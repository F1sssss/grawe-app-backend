version: '3'

services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3001:3001'                 # Map the server container's port 3000 to the host's port 3000
    environment:
      - DB_HOST=localhost
      - DB_USER=SA
      - DB_PASSWORD=${SQL_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}

    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
      #- ./node_modules:/usr/src/app/node_modules

    restart: on-failure
    depends_on:
      - mssql-server
      - cache
    networks:
      mynetwork:
        ipv4_address: 172.23.0.21
    command: ["sh", "-c", "sleep 30 && npm start"]


  mssql-server:
    #image: mcr.microsoft.com/mssql/server:latest
    image: mcr.microsoft.com/mssql/server:2019-latest
    #init: true
    environment:
        - ACCEPT_EULA=Y               # Accept the MSSQL EULA
        - SA_PASSWORD=${SQL_PASSWORD} # Set the SA user password
    #      - MSSQL_PID=Express           # Set the SQL Server Edition
    ports:
      - '1435:1433'                 # Map the MSSQL container's port 1433 to the host's port 1433
    volumes:
      - ./mssql-data/data:/var/opt/mssql/data
      - ./mssql-data/log:/var/opt/mssql/log
      - ./mssql-data/secrets:/var/opt/mssql/secrets


    networks:
      mynetwork:
        ipv4_address: 172.23.0.20



  cache:
    build:
      context: .
      dockerfile: ./redis/Dockerfile
    image: redis:7.2-alpine
    command: sh -c "./init.sh"
    ports:
      - '6379:6379'
    privileged: true
    volumes:
      - ./cache:/data
    restart: always

    environment:
      - ProtectedMode=no

    networks:
      mynetwork:
        ipv4_address: 172.25.0.22

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/:/etc/nginx
      - ./ssl/certificate.crt:/etc/nginx/ssl/certificate.crt
      - ./ssl/private.key:/etc/nginx/ssl/private.key
      - ./ssl/csr.pem:/etc/nginx/ssl/csr.pem
    restart: always


  superset:
    build:
      context: .
      dockerfile: ./superset/Dockerfile
    image: apache/superset:latest
    ports:
      - '8088:8088'
    depends_on:
      - superset-db
    volumes:
      - ./superset/db:/app/superset/superset_home/
    environment:
      - SUPERSET_LOAD_EXAMPLES=no
      #- SUPERSET_DATABASE_URI=mssql+pymssql://sa:Grawe123$@192.168.192.1:1433/SUPERSET
      #- SQLALCHEMY_DATABASE_URI=mssql+pymssql://sa:Grawe123$@192.168.192.1:1433/SUPERSET
      #- 'mssql+pyodbc://@' + localhost + '/' + dbname + '?trusted_connection=yes&driver=ODBC+Driver+13+for+SQL+Server'
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
      - SUPERSET_WEBSERVER_PORT=8088
      - SUPERSET_WEBSERVER_TIMEOUT=6000
      - SUPERSET_WEBSERVER_WORKERS=10
      - SUPERSET_WEBSERVER_THREADS=10
      - SUPERSET_WEBSERVER_MAX_REQUESTS=1000
      - ADMIN_USERNAME= ${SUPERSET_USERNAME}
      - SUPERSET_FEATURE_EMBEDDED_SUPERSET='true'
    networks:
      mynetwork:
        ipv4_address: 172.23.0.13


  superset-db:
    env_file: ./superset/.env
    image: postgres:15
    container_name: superset_db
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ./superset/data:/var/lib/postgresql/data
      - ./superset/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      mynetwork:
        ipv4_address: 172.23.0.23


networks:
  mynetwork:
    ipam:
      driver: default
      config:
        - subnet: "172.23.0.0/24"

