# NGINX configuration file

events {
    # Configure event handling parameters
    worker_connections 1024;
}


# HTTP block
http {
    # Define upstream blocks for backend and frontend applications
    upstream backend {
        server 192.168.1.64:3000;
    }

    upstream frontend {
        server 192.168.1.64:5173;
    }

    upstream superset {
        server 192.168.1.64:8088;
    }


    # HTTP server block
    server {
        listen 80;
        server_name localhost;

        # Redirect HTTP requests to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS server block
    server {
        listen 443 ssl http2;
        server_name localhost;

        client_max_body_size 100M;

        # SSL/TLS configuration
        ssl_certificate /etc/nginx/ssl/certificate.crt;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:100m;
        ssl_session_timeout 600m;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;

        # Security headers
       #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
       # add_header X-Frame-Options "SAMEORIGIN" always;
       # add_header X-Content-Type-Options "nosniff" always;
       # add_header Referrer-Policy "strict-origin-when-cross-origin" always;
       # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.example.com; style-src 'self' 'unsafe-inline' https://cdn.example.com; img-src 'self' data: https://cdn.example.com; font-src 'self' https://fonts.gstatic.com https://cdn.example.com; frame-src 'self';";

        # Access logs
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;


        # Reverse proxy configuration for backend application
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
        }

        # Reverse proxy configuration for frontend application
        location /  {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
        }

    }

    server {
        listen 443 ssl http2;
        server_name superset.localhost;

        client_max_body_size 100M;


        location / {
            proxy_pass http://superset;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
        }
    }

}
