version: '3'

services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    # No direct port exposure in production - NGINX handles external access
    environment:
      - NODE_ENV=production
      - DB_HOST=${SQL_SERVER}
      - DB_USER=${SQL_USER}
      - DB_PASSWORD=${SQL_PASSWORD}
      - REDIS_HOST=172.23.0.22
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    restart: always
    depends_on:
      - cache
    networks:
      mynetwork:
        ipv4_address: 172.23.0.21
    command: ["sh", "-c", "npm run prod"]

  cache:
    build:
      context: .
      dockerfile: ./redis/Dockerfile
    image: redis:7.2-alpine
    command: sh -c "./init.sh"
    # No direct port exposure in production
    privileged: true
    volumes:
      - ./cache:/data
    restart: always
    environment:
      - ProtectedMode=no
    networks:
      mynetwork:
        ipv4_address: 172.23.0.22

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/:/etc/nginx
      - ./ssl/certificate.crt:/etc/nginx/ssl/certificate.crt
      - ./ssl/private.key:/etc/nginx/ssl/private.key
      - ./ssl/csr.pem:/etc/nginx/ssl/csr.pem
    restart: always
    depends_on:
      - server
      - superset
    networks:
      mynetwork:
        ipv4_address: 172.23.0.24

  superset:
    build:
      context: .
      dockerfile: ./superset/Dockerfile
    image: apache/superset:latest
    # No direct port exposure in production - NGINX handles external access
    depends_on:
      - superset-db
      - cache
    volumes:
      - ./superset/db:/app/superset/superset_home/
    environment:
      # Core Superset Configuration
      - SUPERSET_ENV=production
      - SUPERSET_LOAD_EXAMPLES=no
      - SUPERSET_PORT=${SUPERSET_PORT}
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - MAPBOX_API_KEY=${MAPBOX_API_KEY}

      # Admin User Configuration
      - ADMIN_USERNAME=${SUPERSET_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD}
      - ADMIN_EMAIL=${SUPERSET_ADMIN_EMAIL}
      - ADMIN_FIRSTNAME=${SUPERSET_ADMIN_FIRSTNAME}
      - ADMIN_LASTNAME=${SUPERSET_ADMIN_LASTNAME}

      # Database Configuration
      - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}
      - DATABASE_DIALECT=${DATABASE_DIALECT}
      - DATABASE_DB=${POSTGRES_DB}
      - DATABASE_HOST=superset-db
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_USER=${POSTGRES_USER}

      # Redis Configuration
      - REDIS_HOST=${SUPERSET_REDIS_HOST}
      - REDIS_PORT=${SUPERSET_REDIS_PORT}

      # Feature Configuration
      - SUPERSET_FEATURE_EMBEDDED_SUPERSET=${SUPERSET_FEATURE_EMBEDDED_SUPERSET}
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev

      # Flask Configuration
      - FLASK_DEBUG=false
    networks:
      mynetwork:
        ipv4_address: 172.23.0.13

  superset-db:
    image: postgres:15
    container_name: superset_db
    restart: unless-stopped
    volumes:
      - ./superset/data:/var/lib/postgresql/data
      - ./superset/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      mynetwork:
        ipv4_address: 172.23.0.23

networks:
  mynetwork:
    ipam:
      driver: default
      config:
        - subnet: "172.23.0.0/24"